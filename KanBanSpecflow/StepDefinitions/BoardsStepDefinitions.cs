using KanBanApi.Drivers;
using Newtonsoft.Json.Linq;
using System;
using System.Diagnostics;
using TechTalk.SpecFlow.Assist;
using TechTalk.SpecFlow;

namespace KanBanSpecflow.StepDefinitions
{
    [Binding]
    public class BoardsStepDefinitions
    {
        private BoardDriver BoardDriver { get; set; }

        public BoardsStepDefinitions(BoardRepository boardRepository)
        {
            BoardDriver = boardRepository.BoardDriver;
        }

        [Given(@"I have workspaces in the system")]
        public void GivenIHaveWorkspacesInTheSystem(Table table)
        {
            BoardDriver
                .WorkspaceList = () => 
                    table.CreateSet<Dictionary<string, object>>().ToArray();
        }

        [Then(@"I receive a list of workspaces")]
        public void ThenIReceiveAListOfWorkspaces(Table table)
        {
            var result = BoardDriver.GetWorkspaces();

            var set = table.CreateSet<Dictionary<string, object>>();

            //result is an enumerable of workspaces provided by the driver.
            //result should be equivalent to the workspace set provided by the test case.
            result.Should().BeEquivalentTo(set);
        }

        [Given(@"I have boards in the system")]
        public void GivenIHaveBoardsInTheSystem(Table table)
        {
            var boards = table.Rows.Select(a => JObject.FromObject(a).ToObject<Dictionary<string, object>>()).ToArray();

            BoardDriver
                .AllBoards = () => boards;
        }

        [Then(@"I receive a list of boards specific to workspace '([^']*)'")]
        public void ThenIReceiveAListOfBoardsSpecificToThatWorkspace(string p0, Table table)
        {
            var result = BoardDriver.GetBoardsByWorkspace(p0);

            var boards = table.Rows.Select(a => JObject.FromObject(a).ToObject<Dictionary<string, object>>()).ToArray();

            //build the proper payload output
            //this isn't provided by the test case,
            //but it is generated by the driver.
            var resultMatch = new Dictionary<string, object>()
            {
                { "Workspace", p0 },
                { "BoardCount",  boards.Length },
                { "Boards", boards },
            };

            //the only entry within result should also match the payload.
            result.Single().Should().BeEquivalentTo(resultMatch);
        }

        [Given(@"I have board details in the system")]
        public void GivenIHaveBoardDetailsInTheSystem(Table table)
        {
            var boards = table.Rows.Select(a => JObject.FromObject(a).ToObject<Dictionary<string, object>>()).ToArray();

            BoardDriver
                .BoardDetails = () => boards;
        }

        [Then(@"I receive details specific to board '([^']*)' and '([^']*)'")]
        public async Task ThenIReceiveDetailsSpecificToBoardAnd(string p0, string p1, Table table)
        {
            var result = await BoardDriver.GetBoardDetailsAsync(new string[] { p0, String.IsNullOrEmpty(p1)? null!:p1 });

            var details = table.Rows.Select(a => JObject.FromObject(a).ToObject<Dictionary<string, object>>()).ToArray();

            //result is an enumerable of details provided by the driver.
            //result should be equivalent to the details set provided by the test case.
            result.Should().BeEquivalentTo(details);
        }
    }
}
