// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KanBanSpecflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BoardsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Boards.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Boards", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Boards")))
            {
                global::KanBanSpecflow.Features.BoardsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check List of Workspaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Boards")]
        public virtual void CheckListOfWorkspaces()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check List of Workspaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "UUID",
                            "Name"});
                table1.AddRow(new string[] {
                            "d9092be9-555d-4d9d-a8d3-8ac3b181d291",
                            "Workspace_A"});
                table1.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Workspace_B"});
#line 4
 testRunner.Given("I have workspaces in the system", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "UUID",
                            "Name"});
                table2.AddRow(new string[] {
                            "d9092be9-555d-4d9d-a8d3-8ac3b181d291",
                            "Workspace_A"});
                table2.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Workspace_B"});
#line 9
 testRunner.Then("I receive a list of workspaces", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check Boards within Workspaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Boards")]
        public virtual void CheckBoardsWithinWorkspaces()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Boards within Workspaces", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Workspace_UUID",
                            "UUID",
                            "Name"});
                table3.AddRow(new string[] {
                            "d9092be9-555d-4d9d-a8d3-8ac3b181d291",
                            "a9092be9-555d-4d9d-a8d3-8ac3b181d290",
                            "Board_A"});
                table3.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "bf685cb0-447e-416e-ba1d-bcc0586ff0d0",
                            "Board_B"});
                table3.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "cf685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Board_C"});
                table3.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "df685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Board_D"});
#line 15
 testRunner.Given("I have boards in the system", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Workspace_UUID",
                            "UUID",
                            "Name"});
                table4.AddRow(new string[] {
                            "d9092be9-555d-4d9d-a8d3-8ac3b181d291",
                            "a9092be9-555d-4d9d-a8d3-8ac3b181d290",
                            "Board_A"});
#line 22
 testRunner.Then("I receive a list of boards specific to workspace \'d9092be9-555d-4d9d-a8d3-8ac3b18" +
                        "1d291\'", ((string)(null)), table4, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Workspace_UUID",
                            "UUID",
                            "Name"});
                table5.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "bf685cb0-447e-416e-ba1d-bcc0586ff0d0",
                            "Board_B"});
                table5.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "cf685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Board_C"});
                table5.AddRow(new string[] {
                            "ff685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "df685cb0-447e-416e-ba1d-bcc0586ff0d1",
                            "Board_D"});
#line 26
 testRunner.Then("I receive a list of boards specific to workspace \'ff685cb0-447e-416e-ba1d-bcc0586" +
                        "ff0d1\'", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check Boards details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Boards")]
        public virtual void CheckBoardsDetails()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Boards details", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board_UUID",
                            "Name",
                            "Author",
                            "CreatedDate"});
                table6.AddRow(new string[] {
                            "a9092be9-555d-4d9d-a8d3-8ac3b181d290",
                            "Board_A",
                            "ScriptPunk",
                            "5/10/2022"});
                table6.AddRow(new string[] {
                            "bf685cb0-447e-416e-ba1d-bcc0586ff0d0",
                            "Board_B",
                            "ScriptPunk",
                            "5/10/2022"});
#line 33
 testRunner.Given("I have board details in the system", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board_UUID",
                            "Name",
                            "Author",
                            "CreatedDate"});
                table7.AddRow(new string[] {
                            "a9092be9-555d-4d9d-a8d3-8ac3b181d290",
                            "Board_A",
                            "ScriptPunk",
                            "5/10/2022"});
#line 38
 testRunner.Then("I receive details specific to board \'a9092be9-555d-4d9d-a8d3-8ac3b181d290\' and \'\'" +
                        "", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board_UUID",
                            "Name",
                            "Author",
                            "CreatedDate"});
                table8.AddRow(new string[] {
                            "bf685cb0-447e-416e-ba1d-bcc0586ff0d0",
                            "Board_B",
                            "ScriptPunk",
                            "5/10/2022"});
#line 42
 testRunner.Then("I receive details specific to board \'bf685cb0-447e-416e-ba1d-bcc0586ff0d0\' and \'\'" +
                        "", ((string)(null)), table8, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board_UUID",
                            "Name",
                            "Author",
                            "CreatedDate"});
                table9.AddRow(new string[] {
                            "a9092be9-555d-4d9d-a8d3-8ac3b181d290",
                            "Board_A",
                            "ScriptPunk",
                            "5/10/2022"});
                table9.AddRow(new string[] {
                            "bf685cb0-447e-416e-ba1d-bcc0586ff0d0",
                            "Board_B",
                            "ScriptPunk",
                            "5/10/2022"});
#line 46
 testRunner.Then("I receive details specific to board \'a9092be9-555d-4d9d-a8d3-8ac3b181d290\' and \'b" +
                        "f685cb0-447e-416e-ba1d-bcc0586ff0d0\'", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
